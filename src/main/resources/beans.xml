<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<context:component-scan base-package="com.test"></context:component-scan>

	<!-- 1. 数据源 : DriverManagerDataSource 链接Oracle 的数据库 -->
	<bean id="oracleDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
				<property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
				<property name="username" value="scott" />
				<property name="password" value="orcl"/>
	</bean>

	<!-- 1. 数据源 : DriverManagerDataSource MySQL 的数据库 -->
	<bean id="mysqlDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/test?&amp;useSSL=false&amp;allowMultiQueries=true" />
		<property name="username" value="root" />
		<property name="password" value="root"/>
	</bean>

<!--使用动态数据源，因为这里面会同时使用到两个数据库-->
	<bean id="dynamicDataSource" class="com.test.dynamic.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<!-- 指定lookupKey和与之对应的数据源 -->
				<entry key="dataSource1" value-ref="oracleDataSource"></entry>
				<entry key="dataSource2" value-ref="mysqlDataSource"></entry>
			</map>
		</property>
		<!-- 这里可以指定默认的数据源 -->
		<property name="defaultTargetDataSource" ref="oracleDataSource" />
	</bean>


	<!-- 
		2. mybatis的SqlSession的工厂: SqlSessionFactoryBean 
			dataSource / typeAliasesPackage
	-->
	<!--配置SessionFactory-->
	<bean id="sessionFactory" class=" org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dynamicDataSource"/>
			<property name="typeAliasesPackage" value="com.test.dto"/>
	</bean>

	<!--
		3. mybatis自动扫描加载Sql映射文件 : MapperScannerConfigurer 
			sqlSessionFactory / basePackage
	-->

	<bean   class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.test.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
	</bean>



	<!-- 4. 事务管理 : DataSourceTransactionManager -->
	<!--<bean  id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	&lt;!&ndash; 5. 使用声明式事务 &ndash;&gt;
	<tx:annotation-driven transaction-manager="txManager"/>
-->
</beans>
